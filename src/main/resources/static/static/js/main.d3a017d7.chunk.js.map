{"version":3,"sources":["services/AuthService.js","components/login/Login.js","services/FundService.js","services/BalanceService.js","components/createTransaction/CreateTransaction.js","components/home/Home.js","App.js","index.js"],"names":["axios","get","credentials","post","token","headers","Login","props","handleChange","e","target","name","value","setState","handleSubmit","username","state","password","pwd","AuthService","authenticate","then","response","data","success","localStorage","setItem","isLogin","alert","preventDefault","jwtToken","history","className","onSubmit","this","type","required","onChange","placeholder","React","Component","FUND_ENDPOINT","body","BALANCE_ENDPOINT","account_details","OutsideTransactionModal","useState","show","setShow","setName","amount","setAmount","handleClose","Button","variant","onClick","Modal","onHide","Header","closeButton","Title","Body","Footer","acc_details","BalanceService","createNewAccount","updateAccountAndOutstanding","msg","CreateTransaction","accounts","sender","recipient","note","FundService","transferFunds","updateTransaction","updateHMBal","updateOutstanding","console","log","handleNewAccount","getAccounts","getAllAccounts","class","map","account","step","Home","getItem","hmdrf_balance","transactions","balances","getUsername","getHMBal","balance","getTransactions","getAllAccountsDetails","fetchUsername","fetchHMDRFBalance","fetchAllTransactions","fetchOutstandingBalances","date","dateStr","Date","toDateString","toLocaleTimeString","hm_bal","id","transaction","formatDate","txnDate","style","backgroundColor","App","handleLogin","isLog","checkTokenValid","validateToken","exact","path","render","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d3a017d7.chunk.js","sourcesContent":["import axios from 'axios';\r\n// import Constants from '../constants/Constants';\r\n\r\nconst PING_URL = '/auth/ping';\r\nconst AUTHENTICATE_USER = '/auth/authenticate';\r\nconst FETCH_USERNAME = '/auth/username/get';\r\nconst VALIDATE_USER_SESSION = '/auth/validate';\r\n\r\nclass AuthService {\r\n\r\n    ping() {\r\n        return axios.get(PING_URL);\r\n    }\r\n\r\n    authenticate(credentials) {\r\n        return axios.post(AUTHENTICATE_USER,credentials);\r\n    }\r\n\r\n    getUsername(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.post(FETCH_USERNAME,{},{headers: headers});\r\n    }\r\n\r\n    checkTokenValid(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.get(VALIDATE_USER_SESSION,{headers: headers});\r\n    }\r\n\r\n}\r\n\r\nexport default new AuthService();","import React from 'react';\r\nimport AuthService from '../../services/AuthService';\r\n\r\nimport './Login.css';\r\n\r\nclass Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username :'',\r\n            pwd : '',\r\n            jwtToken : '',\r\n            history:'',\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {name,value} = e.target;\r\n        this.setState({\r\n            [name]:value,\r\n        })\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        let credentials = {\r\n            username:this.state.username,\r\n            password:this.state.pwd\r\n        }\r\n\r\n        AuthService.authenticate(credentials).then((response) => {\r\n            let loginResult = response.data.success;\r\n            if (loginResult) {\r\n                // login success\r\n                localStorage.setItem('hmToken',response.data.token);\r\n                this.props.isLogin(true);\r\n            } else {\r\n                alert('Wrong credentials');\r\n            }\r\n        });\r\n        e.preventDefault();\r\n        return false;\r\n    }\r\n\r\n    render() {\r\n        return (\r\n        <div>\r\n            <div className=\"header-login\">\r\n                <h1><i className=\"fas fa-dice-d20\"></i>HMDRF</h1>\r\n            </div>\r\n            <div className=\"login-div\">\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <h3>Sign In</h3>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"auth-label\">Username</label>\r\n                        <input type='text' className=\"form-control\" name='username' required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"form-group\">\r\n                        <label className=\"auth-label\">Password</label>\r\n                        <input type='password' className=\"form-control\" name='pwd' placeholder=\"******\" required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <button className=\"btn btn-primary btn-block loginButton\" onSubmit={this.handleSubmit}>Log In!</button>\r\n                </form>\r\n                <h1>{this.state.jwtToken}</h1>\r\n            </div>\r\n        </div>\r\n        ); \r\n    }\r\n}\r\n\r\nexport default Login;","import axios from 'axios';\r\n// import Constants from '../constants/Constants';\r\n\r\nconst FUND_ENDPOINT = '/api/funds';\r\nconst GET_HM_BAL = FUND_ENDPOINT + '/hmbal/get';\r\nconst GET_TRANSACTIONS = FUND_ENDPOINT + '/transactions/getAll';\r\nconst TRANSFER_FUNDS = FUND_ENDPOINT + '/transfer'\r\n\r\nclass FundService {\r\n    getHMBal(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.get(GET_HM_BAL,{headers: headers});\r\n    }\r\n\r\n    getTransactions(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.get(GET_TRANSACTIONS,{headers: headers});\r\n    }\r\n\r\n    transferFunds(token, body) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.post(TRANSFER_FUNDS,body,{headers: headers});\r\n    }\r\n}\r\n\r\nexport default new FundService();","import axios from 'axios';\r\n// import Constants from '../constants/Constants';\r\n\r\nconst BALANCE_ENDPOINT = '/api/balance';\r\nconst CREATE_NEW_ACCOUNT = BALANCE_ENDPOINT + '/create';\r\nconst GET_ALL_ACCOUNTS = BALANCE_ENDPOINT + '/accounts/get';\r\nconst GET_ALL_ACCOUNTS_DETAILS = BALANCE_ENDPOINT + '/accounts/getAll';\r\n\r\nclass BalanceService {\r\n\r\n    getAllAccounts(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.get(GET_ALL_ACCOUNTS, {headers: headers});\r\n    }\r\n\r\n    getAllAccountsDetails(token) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.get(GET_ALL_ACCOUNTS_DETAILS, {headers: headers});\r\n    }\r\n\r\n    createNewAccount(token,account_details) {\r\n        let headers = {\r\n            \"Authorization\": \"Bearer \"+token,\r\n        }\r\n        return axios.post(CREATE_NEW_ACCOUNT, account_details,{headers: headers});\r\n    }\r\n}\r\n\r\nexport default new BalanceService();","import React, {useState} from 'react';\r\nimport BalanceService from '../../services/BalanceService';\r\nimport FundService from '../../services/FundService';\r\nimport {Button, Modal} from 'react-bootstrap';\r\n\r\nimport './CreateTransaction.css'\r\n\r\nfunction OutsideTransactionModal(props) {\r\n    const [show, setShow] = useState(false);\r\n    const [name, setName] = useState('');\r\n    const [amount, setAmount] = useState(0);\r\n  \r\n    const handleCreate = () => {\r\n        let acc_details = {\r\n            \"name\": name,\r\n            \"amount\": amount\r\n        }\r\n        BalanceService.createNewAccount(props.token, acc_details).then((response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                props.updateAccountAndOutstanding();\r\n                setShow(false);\r\n            } else {\r\n                alert(response.data.msg);\r\n            }\r\n        });\r\n    };\r\n\r\n    const handleClose = () => setShow(false);\r\n    const handleShow = () => setShow(true);\r\n  \r\n    return (\r\n      <div className=\"add_new_account\">\r\n        <Button className=\"new_acc_button\" variant=\"primary\" onClick={handleShow}>\r\n          Add new account\r\n        </Button>\r\n  \r\n        <Modal show={show} onHide={handleClose}>\r\n          <Modal.Header closeButton>\r\n            <Modal.Title>Create new account</Modal.Title>\r\n          </Modal.Header>\r\n          <Modal.Body>\r\n            <label>Name: </label>\r\n            <input type=\"text\" name=\"name\" required onChange={(e) => setName(e.target.value)}/>\r\n            <br></br>\r\n            <label>Initial Amount: </label>\r\n            <input type=\"text\" name=\"amount\" required onChange={(e) => setAmount(e.target.value)}/> \r\n          </Modal.Body>\r\n          <Modal.Footer>\r\n            <Button variant=\"secondary\" onClick={handleClose}>\r\n              Close\r\n            </Button>\r\n            <Button variant=\"primary\" onClick={handleCreate}>\r\n              Create Account\r\n            </Button>\r\n          </Modal.Footer>\r\n        </Modal>\r\n      </div>\r\n    );\r\n}\r\n  \r\n\r\n\r\nclass CreateTransaction extends React.Component {\r\n\r\n    state = {\r\n        accounts:[],\r\n        sender: 'HMDRF',\r\n        recipient: 'HMDRF',\r\n        amount:0,\r\n        note: ''\r\n    }\r\n\r\n    getAccounts() {\r\n        BalanceService.getAllAccounts(this.props.token).then((response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.setState({ accounts: response.data.accounts });\r\n            }\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.getAccounts();\r\n    }\r\n\r\n    handleChange = (e) => {\r\n        const {name,value} = e.target;\r\n        this.setState({\r\n            [name]:value,\r\n        });\r\n    }\r\n\r\n    handleSubmit = () => {\r\n        let body = {\r\n            \"sender\":this.state.sender,\r\n            \"recipient\":this.state.recipient,\r\n            \"amount\":this.state.amount,\r\n            \"note\":this.state.note\r\n        };\r\n        FundService.transferFunds(this.props.token,body).then((response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.props.updateTransaction();\r\n                this.props.updateHMBal();\r\n                this.props.updateOutstanding();\r\n                this.setState({\r\n                    amount:0,\r\n                    note:'',\r\n                });\r\n            } else {\r\n                alert(\"FAILED: \"+response.data.msg);\r\n            }\r\n        });\r\n        console.log(body);\r\n    }\r\n\r\n    handleNewAccount = () => {\r\n        this.getAccounts();\r\n        this.props.updateOutstanding();\r\n    }\r\n\r\n    render () {\r\n        return (\r\n            <div class=\"transactions_create\">\r\n                <div className=\"row_one\">\r\n                    <div className=\"column_one\">\r\n                        <label>Sender </label>\r\n                        <select name=\"sender\" required onChange={this.handleChange}>\r\n                            { \r\n                                this.state.accounts.map(\r\n                                account => <option value={account}>{account}</option>) \r\n                            }\r\n                        </select>\r\n                        <label>Recipient </label>\r\n                        <select name=\"recipient\" required onChange={this.handleChange}>\r\n                            { \r\n                                this.state.accounts.map(\r\n                                account => <option value={account}>{account}</option>) \r\n                            }\r\n                        </select>\r\n                        <label>Amount </label>\r\n                        <input type=\"number\" value={this.state.amount} name=\"amount\" step=\".01\" required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"column_two\">\r\n                        <label>Note: </label>\r\n                        <textarea name=\"note\" value={this.state.note} placeholder=\"Reason to send money?\" required onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"column_three\">\r\n                        <button className=\"transaction_submit_button\" type=\"submit\" onClick={this.handleSubmit}>Transfer</button>\r\n                        <OutsideTransactionModal \r\n                        token={this.props.token}\r\n                        updateAccountAndOutstanding={() => this.handleNewAccount()} />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default CreateTransaction;","import React from 'react';\r\nimport './Home.css'\r\nimport AuthService from '../../services/AuthService';\r\nimport FundService from \"../../services/FundService\";\r\nimport CreateTransaction from '../createTransaction/CreateTransaction';\r\nimport BalanceService from '../../services/BalanceService';\r\n\r\nclass Home extends React.Component {\r\n    token = localStorage.getItem(\"hmToken\");\r\n\r\n    state = {\r\n        username:'BOB ROSS',\r\n        hmdrf_balance:0,\r\n        transactions:[],\r\n        balances:[],\r\n    }\r\n\r\n    fetchUsername() {\r\n        AuthService.getUsername(this.token).then( (response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.setState({username : response.data.msg})\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchHMDRFBalance() {\r\n        FundService.getHMBal(this.token).then((response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.setState({hmdrf_balance : response.data.balance})\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchAllTransactions() {\r\n        FundService.getTransactions(this.token).then((response) => {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.setState({transactions: response.data.transactions})\r\n            }\r\n        });\r\n    }\r\n\r\n    fetchOutstandingBalances() {\r\n        BalanceService.getAllAccountsDetails(this.token).then((response)=> {\r\n            let success = response.data.success;\r\n            if (success) {\r\n                this.setState({balances: response.data.accounts})\r\n            }\r\n        })\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.token = localStorage.getItem(\"hmToken\");\r\n        this.fetchUsername();\r\n        this.fetchHMDRFBalance();\r\n        this.fetchAllTransactions();\r\n        this.fetchOutstandingBalances();\r\n\r\n    }\r\n\r\n    \r\n    formatDate(date) {\r\n        let dateStr = new Date(date).toDateString();\r\n        let timeStr = new Date(date).toLocaleTimeString();\r\n        return timeStr+\", \"+dateStr;\r\n    }\r\n\r\n\r\n    render() {\r\n        let name = this.state.username;\r\n        let hm_bal = this.state.hmdrf_balance;\r\n        return (\r\n            <div class=\"row\">\r\n                {/* -------------------- LEFT COL -------------------- */}\r\n                <div class=\"column\" id=\"profile_and_hm_balance\" >\r\n                    <div class=\"profile\" >\r\n                        <h2>Welcome {name}!</h2>\r\n                    </div>\r\n                    <div class=\"hm_balance\">\r\n                        <h3>Current HMDRF Balance</h3>\r\n                        <h4>Rs {hm_bal}</h4>\r\n                    </div>\r\n                </div>\r\n\r\n                {/* -------------------- CENTER COL -------------------- */}\r\n                <div  id=\"show_and_create_transactions\">\r\n                    <div class=\"transactions_header\" >\r\n                    <h2>Transactions</h2>\r\n                    </div>   \r\n                    <div class=\"transactions_scroll_view\" >\r\n                        <ul class=\"transactions_list\">\r\n                            {\r\n                                this.state.transactions.map(\r\n                                    transaction =>\r\n                                    <li key={transaction.id}>\r\n                                        <div className=\"row_txn\">\r\n                                            <div className=\"to_fro_div\">\r\n                                                <span class=\"sender\">{transaction.sender}</span>\r\n                                                <i class=\"fas fa-angle-double-right\"></i>\r\n                                                <span className=\"receiver\">{transaction.recipient}</span>\r\n                                            </div>\r\n                                            <div className=\"amount_div\">\r\n                                                <i class=\"fas fa-wallet\"></i>\r\n                                                <span className=\"amount_span\">Rs. <span className=\"amount\">{transaction.amount}</span> </span>\r\n                                            </div>\r\n                                        </div>\r\n                                        <i class=\"fas fa-comment note_icon\"></i> <span className=\"note\">{transaction.note}</span>\r\n                                        <br></br>\r\n                                        <i class=\"fas fa-calendar-day time_icon\"></i>\r\n                                        <span className=\"time\">{this.formatDate(transaction.txnDate)}</span>\r\n                                    </li>\r\n                                )\r\n                            }\r\n                        </ul>\r\n                    </div>\r\n                    <div className=\"create_transaction_pane\">\r\n                        <h3>Transfer Funds</h3>\r\n                        <CreateTransaction token={this.token} \r\n                            updateTransaction={() => this.fetchAllTransactions()}\r\n                            updateHMBal={() => this.fetchHMDRFBalance()}\r\n                            updateOutstanding={() => this.fetchOutstandingBalances()}\r\n                        />\r\n                    </div>\r\n                </div>\r\n\r\n                {/* -------------------- RIGHT COL -------------------- */}\r\n                <div class=\"column\" id=\"outstanding_balance\" style={{backgroundColor:\"green\"}}>\r\n                    <h2>Outstanding</h2>\r\n                    <table class=\"outstanding_table\">\r\n                        <thead>\r\n                            <tr>\r\n                                <td>Name</td>\r\n                                <td>Balance</td>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {\r\n                                this.state.balances.map(\r\n                                    balance => \r\n                                    <tr>\r\n                                        <td>{balance.name}</td>\r\n                                        <td>{balance.balance}</td>\r\n                                    </tr>\r\n                                )\r\n                            }\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;","import './App.css';\nimport React from 'react';\nimport Login from './components/login/Login';\nimport {Switch, Route} from 'react-router-dom';\nimport Home from './components/home/Home';\nimport AuthService from './services/AuthService';\nimport 'react-app-polyfill/stable';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport '@fortawesome/fontawesome-free/css/all.min.css';\n\nconst token = localStorage.getItem(\"hmToken\");\n\nclass App extends React.Component {\n  constructor(props) {\n      super(props);\n      this.state = {\n        isLog:false,\n      }\n  }\n\n  handleLogin = (isLog) => this.setState({isLog : isLog});\n\n  validateToken(token) {\n    if (token) {\n      AuthService.checkTokenValid(token).then((response) => {\n        let success = response.data.success;\n        console.log(response);\n        if (success) {\n            this.setState({isLog : true});\n        }\n      });\n    }\n  }\n  \n  componentDidMount() {\n    this.validateToken(token);\n  }\n\n  render () {\n    const isLog = this.state.isLog;\n    \n    return (\n      <div className=\"App\">\n        <Switch>\n          <Route exact path='/' render={()=> !isLog ? <Login isLogin={this.handleLogin}/> : <Home/> }/>\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}